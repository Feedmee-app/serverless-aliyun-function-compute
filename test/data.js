"use strict";
// should correspond to test/.serverless/configuration-template-update.json

exports.apiGroup = {
  "GroupName": "my_service_dev_api",
  "Description": "API group for Function Compute service my-service-dev, generated by the Serverless framework.",
  "Region": "cn-shanghai"
};

exports.fullGroup = {
  "GroupName": "my_service_dev_api",
  "Description": "API group for Function Compute service my-service-dev, generated by the Serverless framework.",
  "GroupId": "523e8dc7bbe04613b5b1d726c2a7889d",
  "SubDomain": "523e8dc7bbe04613b5b1d726c2a7889d-cn-shanghai.alicloudapi.com"
};

exports.apis = [{
  "GroupName": "my_service_dev_api",
  "ApiName": "sls_http_my_service_dev_postTest",
  "Visibility": "PUBLIC",
  "Description": "API for Function Compute function my-service-dev-postTest of service my-service-dev, triggered by http event, generated by the Serverless framework.",
  "AuthType": "ANONYMOUS",
  "RequestConfig": {
    "RequestProtocol": "HTTP",
    "RequestHttpMethod": "POST",
    "RequestPath": "/baz",
    "BodyFormat": "FORM",
    "PostBodyDescription": ""
  },
  "ServiceConfig": {
    "ServiceProtocol": "FunctionCompute",
    "Mock": "FALSE",
    "ServiceTimeout": 3000,
    "FunctionComputeConfig": {
      "FcRegionId": "cn-shanghai",
      "ServiceName": "my-service-dev",
      "FunctionName": "my-service-dev-postTest"
    },
    "ContentTypeValue": "application/json; charset=UTF-8"
  },
  "RequestParameters": [
    {
      "ApiParameterName": "foo",
      "ParameterType": "String",
      "Location": "Body",
      "Required": "OPTIONAL",
      "isHide": false,
      "DefaultValue": "bar",
      "DemoValue": "bar",
      "Description": "foo"
    }
  ],
  "ServiceParameters": [
    {
      "ServiceParameterName": "foo",
      "Type": "String",
      "Location": "Body",
      "ParameterCatalog": "REQUEST"
    }
  ],
  "ServiceParametersMap": [
    {
      "ServiceParameterName": "foo",
      "RequestParameterName": "foo"
    }
  ],
  "ResultType": "JSON",
  "ResultSample": "{}"
}, {
  "GroupName": "my_service_dev_api",
  "ApiName": "sls_http_my_service_dev_getTest",
  "Visibility": "PUBLIC",
  "Description": "API for Function Compute function my-service-dev-getTest of service my-service-dev, triggered by http event, generated by the Serverless framework.",
  "AuthType": "ANONYMOUS",
  "RequestConfig": {
    "RequestProtocol": "HTTP",
    "RequestHttpMethod": "GET",
    "RequestPath": "/quo",
    "BodyFormat": "",
    "PostBodyDescription": ""
  },
  "ServiceConfig": {
    "ServiceProtocol": "FunctionCompute",
    "Mock": "FALSE",
    "ServiceTimeout": 3000,
    "FunctionComputeConfig": {
      "FcRegionId": "cn-shanghai",
      "ServiceName": "my-service-dev",
      "FunctionName": "my-service-dev-getTest"
    },
    "ContentTypeValue": "application/json; charset=UTF-8"
  },
  "RequestParameters": [],
  "ServiceParameters": [],
  "ServiceParametersMap": [],
  "ResultType": "JSON",
  "ResultSample": "{}"
}];

exports.fullApis = [{
  "ApiName": "sls_http_my_service_dev_postTest",
  "ApiId": '4134134134141'
}, {
  "ApiName": "sls_http_my_service_dev_getTest",
  "ApiId": '413243280141'
}];

exports.role = {
  "RoleName": "sls-my-service-dev-invoke-role",
  "Description": "Allow Function Compute Service my-service-dev to be triggered, generated by the Serverless framework",
  "AssumeRolePolicyDocument": {
    "Version": "1",
    "Statement": [
      {
        "Action": "sts:AssumeRole",
        "Effect": "Allow",
        "Principal": {
          "Service": [
            "apigateway.aliyuncs.com"
          ]
        }
      }
    ]
  },
  "Policies": [
    {
      "PolicyType": "System",
      "PolicyName": "AliyunFCInvocationAccess",
      "RoleName": "sls-my-service-dev-invoke-role"
    }
  ]
};

exports.execRole = {
  "RoleName": "sls-my-service-dev-exec-role",
  "Description": "Allow Function Compute Service my-service-dev to access other services, generated by the Serverless framework",
  "AssumeRolePolicyDocument": {
    "Version": "1",
    "Statement": [
      {
        "Action": "sts:AssumeRole",
        "Effect": "Allow",
        "Principal": {
          "Service": [
            "fc.aliyuncs.com"
          ]
        }
      }
    ]
  },
  "Policies": [
    {
      "PolicyName": "fc-access-sls-my-service-logs-dev",
      "Description": "Allow Function Compute to access log store my-service-dev of project sls-my-service-logs",
      "PolicyDocument": {
        "Version": "1",
        "Statement": [
          {
            "Action": [
              "log:PostLogStoreLogs"
            ],
            "Resource": [
              "acs:log:*:ttt:project/sls-my-service-logs/logstore/my-service-dev"
            ],
            "Effect": "Allow"
          }
        ]
      }
    }
  ]
};

exports.fullRole =  {
  "RoleId": "901234567890123",
  "RoleName": "sls-my-service-dev-invoke-role",
  "Arn": "acs:ram::1234567890123456:role/sls-my-service-dev-invoke-role"
}

exports.fullExecRole =  {
  "RoleId": "901234223890123",
  "RoleName": "sls-my-service-dev-exec-role",
  "Arn": "acs:ram::1234567890123456:role/sls-my-service-dev-exec-role"
}

exports.service = {
  "name": "my-service-dev",
  "region": "cn-shanghai",
  "logConfig": {
    "logstore": "my-service-dev",
    "project": "sls-my-service-logs"
  }
};

exports.functions = [{
  "name": "my-service-dev-postTest",
  "service": "my-service-dev",
  "handler": "index.postHandler",
  "memorySize": 128,
  "timeout": 30,
  "runtime": "nodejs4.4",
  "code": {
    "ossBucketName": "sls-my-service",
    "ossObjectName": "serverless/my-service/dev/1500622721413-2017-07-21T07:38:41.413Z/my-service.zip"
  }
  }, {
  "name": "my-service-dev-getTest",
  "service": "my-service-dev",
  "handler": "index.getHandler",
  "memorySize": 128,
  "timeout": 30,
  "runtime": "nodejs4.4",
  "code": {
    "ossBucketName": "sls-my-service",
    "ossObjectName": "serverless/my-service/dev/1500622721413-2017-07-21T07:38:41.413Z/my-service.zip"
  }
}];

exports.fullFunctions = [{
  "functionName": "my-service-dev-postTest",
  "lastModifiedTime": "2017-07-21T07:38:41.413Z"
}, {
  "functionName": "my-service-dev-getTest",
  "lastModifiedTime": "2017-07-21T07:38:41.413Z"
}];

exports.bucket = {
  name: 'sls-my-service',
  region: 'cn-shanghai'
};

exports.objects = [{
  name: 'serverless/my-service/dev/1500622721413-2017-07-21T07:38:41.413Z/my-service.zip'
},{
  name: 'serverless/my-service/dev/1510622721413-2017-07-23T07:38:41.413Z/my-service.zip'
},{
  name: 'serverless/my-service/dev/1520622721413-2017-07-25T07:38:41.413Z/my-service.zip'
}];

exports.functionDefs = {
  postTest: {
    handler: 'index.postHandler',
    events: [
      { http: {
        path: '/baz',
        method: 'post'
      } },
    ],
  },
  getTest: {
    handler: 'index.getHandler',
    events: [
      { http: {
        path: '/quo',
        method: 'get'
      } },
    ],
  }
};

exports.logProject = {
  "projectName": "sls-my-service-logs",
  "description": "Log project for serverless service my-service, generated by the Serverless framework"
};

exports.fullLogProject = {
  "createTime": "2017-08-17 17:56:36",
  "description": "Log project for serverless service my-service, generated by the Serverless framework",
  "lastModifyTime": "2017-08-17 17:56:36",
  "owner": "ttt",
  "projectName": "sls-my-service-logs",
  "region": "cn-shanghai",
  "status": "Normal"
};

exports.logStore = {
  "projectName": "sls-my-service-logs",
  "storeName": "my-service-dev",
  "description": "Log store for Function Compute service my-service-dev, generated by the Serverless framework",
  "ttl": 30,
  "shardCount": 2
};

exports.fullLogStore = {
  "logstoreName": "my-service-dev",
  "ttl": 30,
  "shardCount": 2,
  "enable_tracking": false,
  "createTime": 1502963801,
  "lastModifyTime": 1502963801
};

exports.logIndex = {
  "projectName": "sls-my-service-logs",
  "storeName": "my-service-dev",
  "ttl": 30,
  "keys": {
    "functionName": {
      "caseSensitive": false,
      "token": [
        "\n",
        "\t",
        ";",
        ",",
        "=",
        ":"
      ],
      "type": "text"
    }
  }
};
exports.fullLogIndex = {
  "index_mode": "v2",
  "keys": {
    "functionName": {
      "caseSensitive": false,
      "token": [
        "\n",
        "\t",
        ";",
        ",",
        "=",
        ":"
      ],
      "type": "text"
    }
  },
  "storage": "pg",
  "ttl": 30,
  "lastModifyTime": 1502963801
};