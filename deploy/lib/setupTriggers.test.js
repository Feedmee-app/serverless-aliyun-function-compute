'use strict';

const fs = require('fs');
const path = require('path');

const sinon = require('sinon');
const BbPromise = require('bluebird');

const AliyunProvider = require('../../provider/aliyunProvider');
const AliyunDeploy = require('../aliyunDeploy');
const Serverless = require('../../test/serverless');

describe('setupTriggers', () => {
  let serverless;
  let aliyunDeploy;

  const apis = [{
    "GroupName": "my-service-dev-api",
    "ApiName": "sls-http-my-service-dev-currentTime",
    "Visibility": "PUBLIC",
    "Description": "API for Function Compute function my-service-dev-currentTime of service my-service-dev, triggered by http event, generated by the Serverless framework.",
    "AuthType": "ANONYMOUS",
    "RequestConfig": {
      "RequestProtocol": "HTTP",
      "RequestHttpMethod": "GET",
      "RequestPath": "/ping",
      "RequestParameters": [],
      "BodyFormat": "",
      "PostBodyDescription": ""
    },
    "ServiceConfig": {
      "ServiceProtocol": "FunctionCompute",
      "Mock": "FALSE",
      "ServiceTimeout": 3000,
      "FunctionComputeConfig": {
        "FcRegionId": "cn-hangzhou",
        "ServiceName": "my-service-dev",
        "FunctionName": "my-service-dev-currentTime"
      },
      "ContentTypeValue": "application/json; charset=UTF-8"
    },
    "ResultType": "JSON",
    "ResultSample": "{}"
  }, {
    "GroupName": "my-service-dev-api",
    "ApiName": "sls-http-my-service-dev-currentTime2",
    "Visibility": "PUBLIC",
    "Description": "API for Function Compute function my-service-dev-currentTime2 of service my-service-dev, triggered by http event, generated by the Serverless framework.",
    "AuthType": "ANONYMOUS",
    "RequestConfig": {
      "RequestProtocol": "HTTP",
      "RequestHttpMethod": "GET",
      "RequestPath": "/ping2",
      "RequestParameters": [],
      "BodyFormat": "",
      "PostBodyDescription": ""
    },
    "ServiceConfig": {
      "ServiceProtocol": "FunctionCompute",
      "Mock": "FALSE",
      "ServiceTimeout": 3000,
      "FunctionComputeConfig": {
        "FcRegionId": "cn-hangzhou",
        "ServiceName": "my-service-dev",
        "FunctionName": "my-service-dev-currentTime2"
      },
      "ContentTypeValue": "application/json; charset=UTF-8"
    },
    "ResultType": "JSON",
    "ResultSample": "{}"
  }];

  const group = {
    "GroupName": "my-service-dev-api",
    "Description": "API group for Function Compute service my-service-dev, generated by the Serverless framework.",
    "Region": "cn-hangzhou"
  };

  const fullGroup = {
    "GroupName": "my-service-dev-api",
    "Description": "API group for Function Compute service my-service-dev, generated by the Serverless framework.",
    "GroupId": "523e8dc7bbe04613b5b1d726c2a7889d",
    "SubDomain": "523e8dc7bbe04613b5b1d726c2a7889d-cn-hangzhou.alicloudapi.com"
  };

  const role = {
    "RoleName": "SLSFCInvocationFromAPIGateway",
    "Description": "Allow Function Compute Service to be visited by API Gateway, generated by the Serverless framework",
    "AssumeRolePolicyDocument": {
      "Version": "1",
      "Statement": [
        {
          "Action": "sts:AssumeRole",
          "Effect": "Allow",
          "Principal": {
            "Service": [
              "apigateway.aliyuncs.com"
            ]
          }
        }
      ]
    },
    "Policies": [
      {
        "PolicyType": "System",
        "PolicyName": "AliyunFCInvocationAccess",
        "RoleName": "SLSFCInvocationFromAPIGateway"
      }
    ]
  };

  const fullRole =  {
    "RoleId": "901234567890123",
    "RoleName": "SLSFCInvocationFromAPIGateway",
    "Arn": "acs:ram::1234567890123456:role/SLSFCInvocationFromAPIGateway"
  }

  const fullApis = [{
    "ApiName": "sls-http-my-service-dev-currentTime",
    "ApiId": '4134134134141'
  }, {
    "ApiName": "sls-http-my-service-dev-currentTime2",
    "ApiId": '413243280141'
  }];

  beforeEach(() => {
    serverless = new Serverless();
    serverless.service.service = 'my-service';
    serverless.service.provider = {
      name: 'aliyun',
      credentials: path.join(__dirname, '..', '..', 'test', 'credentials'),
    };
    serverless.config = {
      servicePath: path.join(__dirname, '..', '..', 'test')
    };
    const options = {
      stage: 'dev',
      region: 'cn-hangzhou',
    };
    serverless.setProvider('aliyun', new AliyunProvider(serverless, options));
    aliyunDeploy = new AliyunDeploy(serverless, options);
  });

  describe('#setupTriggers()', () => {
    let createApisIfNeededStub;
    let createTriggersIfNeededStub;

    beforeEach(() => {
      createApisIfNeededStub = sinon.stub(aliyunDeploy, 'createApisIfNeeded')
        .returns(BbPromise.resolve());
      createTriggersIfNeededStub = sinon.stub(aliyunDeploy, 'createTriggersIfNeeded')
        .returns(BbPromise.resolve());
    });

    afterEach(() => {
      aliyunDeploy.createApisIfNeeded.restore();
      aliyunDeploy.createTriggersIfNeeded.restore();
    });

    it('should run promise chain', () => aliyunDeploy
      .setupTriggers().then(() => {
        expect(createApisIfNeededStub.calledOnce).toEqual(true);
        expect(createTriggersIfNeededStub.calledAfter(createApisIfNeededStub));
      })
    );

    it('should set apis property', () => {
      return aliyunDeploy.setupTriggers().then(() => {
          expect(aliyunDeploy.apis).toEqual(apis);
        });
      }
    );
  });

  describe('#createApisIfNeeded()', () => {
    let createApiGroupIfNotExistsStub;
    let createApiRoleIfNotExistsStub;
    let createApiPolicyIfNotExistsStub;
    let checkExistingApisStub;
    let createOrUpdateApisStub;
    let deployApisStub;

    beforeEach(() => {
      createApiGroupIfNotExistsStub = sinon.stub(aliyunDeploy, 'createApiGroupIfNotExists')
        .returns(BbPromise.resolve());
      createApiRoleIfNotExistsStub = sinon.stub(aliyunDeploy, 'createApiRoleIfNotExists')
        .returns(BbPromise.resolve());
      createApiPolicyIfNotExistsStub = sinon.stub(aliyunDeploy, 'createApiPolicyIfNotExists')
        .returns(BbPromise.resolve());
      checkExistingApisStub = sinon.stub(aliyunDeploy, 'checkExistingApis')
        .returns(BbPromise.resolve());
      createOrUpdateApisStub = sinon.stub(aliyunDeploy, 'createOrUpdateApis')
        .returns(BbPromise.resolve());
      deployApisStub = sinon.stub(aliyunDeploy, 'deployApis')
        .returns(BbPromise.resolve());
    });

    afterEach(() => {
      aliyunDeploy.createApiGroupIfNotExists.restore();
      aliyunDeploy.createApiRoleIfNotExists.restore();
      aliyunDeploy.createApiPolicyIfNotExists.restore();
      aliyunDeploy.checkExistingApis.restore();
      aliyunDeploy.createOrUpdateApis.restore();
      aliyunDeploy.deployApis.restore();
    });

    it('should run promise chain when there are apis', () => {
      aliyunDeploy.apis = apis;
      return aliyunDeploy.createApisIfNeeded().then(() => {
        expect(createApiGroupIfNotExistsStub.calledOnce).toEqual(true);
        expect(createApiRoleIfNotExistsStub.calledAfter(createApiGroupIfNotExistsStub));
        expect(createApiPolicyIfNotExistsStub.calledAfter(createApiRoleIfNotExistsStub));
        expect(checkExistingApisStub.calledAfter(createApiPolicyIfNotExistsStub));
        expect(createOrUpdateApisStub.calledAfter(checkExistingApisStub));
        expect(deployApisStub.calledAfter(createOrUpdateApisStub));
      });
    });

    it('should not run promise chain when there are no apis', () => {
      aliyunDeploy.apis = [];
      return aliyunDeploy.createApisIfNeeded().then(() => {
        expect(createApiGroupIfNotExistsStub.called).toEqual(false);
        expect(createApiRoleIfNotExistsStub.called).toEqual(false);
        expect(createApiPolicyIfNotExistsStub.called).toEqual(false);
        expect(checkExistingApisStub.called).toEqual(false);
        expect(createOrUpdateApisStub.called).toEqual(false);
        expect(deployApisStub.called).toEqual(false);
      });
    });
  });

  describe('#createApiGroupIfNotExists()', () => {
    let getApiGroupStub;
    let createApiGroupStub;

    beforeEach(() => {
      getApiGroupStub = sinon.stub(aliyunDeploy.provider, 'getApiGroup');
      createApiGroupStub = sinon.stub(aliyunDeploy.provider, 'createApiGroup');
    });

    afterEach(() => {      
      aliyunDeploy.provider.getApiGroup.restore();
      aliyunDeploy.provider.createApiGroup.restore();
    });

    it('should create api group if it does not exist', () =>  {
        getApiGroupStub
          .returns(BbPromise.resolve(undefined));
        createApiGroupStub.returns(BbPromise.resolve(fullGroup));
        return aliyunDeploy.createApiGroupIfNotExists().then(() => {
          expect(getApiGroupStub.calledOnce).toEqual(true);
          expect(getApiGroupStub.calledWithExactly('my-service-dev-api')).toEqual(true);
          expect(createApiGroupStub.calledOnce).toEqual(true);
          expect(createApiGroupStub.calledWithExactly(aliyunDeploy.templates.update.Resources['sls-api-group'].Properties)).toEqual(true);
          expect(aliyunDeploy.apiGroup).toEqual(fullGroup);
        });
      }
    );

    it('should not create api group if it exists', () =>  {
        getApiGroupStub
          .returns(BbPromise.resolve(fullGroup));
        createApiGroupStub.returns(BbPromise.resolve());
        return aliyunDeploy.createApiGroupIfNotExists().then(() => {
          expect(getApiGroupStub.calledOnce).toEqual(true);
          expect(getApiGroupStub.calledWithExactly('my-service-dev-api')).toEqual(true);
          expect(createApiGroupStub.called).toEqual(false);
          expect(aliyunDeploy.apiGroup).toEqual(fullGroup);
        });
      }
    );
  });

  describe('#createApiRoleIfNotExists()', () => {
    let getApiRoleStub;
    let createApiRoleStub;

    beforeEach(() => {
      getApiRoleStub = sinon.stub(aliyunDeploy.provider, 'getApiRole');
      createApiRoleStub = sinon.stub(aliyunDeploy.provider, 'createApiRole');
    });

    afterEach(() => {      
      aliyunDeploy.provider.getApiRole.restore();
      aliyunDeploy.provider.createApiRole.restore();
    });

    it('should create api role if it does not exist', () =>  {
        getApiRoleStub
          .returns(BbPromise.resolve(undefined));
        createApiRoleStub.returns(BbPromise.resolve(fullRole));
        return aliyunDeploy.createApiRoleIfNotExists().then(() => {
          expect(getApiRoleStub.calledOnce).toEqual(true);
          expect(getApiRoleStub.calledWithExactly('SLSFCInvocationFromAPIGateway')).toEqual(true);
          expect(createApiRoleStub.calledOnce).toEqual(true);
          expect(createApiRoleStub.calledWithExactly(role)).toEqual(true);
          expect(aliyunDeploy.apiRole).toEqual(fullRole);
        });
      }
    );

    it('should not create api role if it exists', () =>  {
        getApiRoleStub
          .returns(BbPromise.resolve(fullRole));
        createApiRoleStub.returns(BbPromise.resolve(fullRole));
        return aliyunDeploy.createApiRoleIfNotExists().then(() => {
          expect(getApiRoleStub.calledOnce).toEqual(true);
          expect(getApiRoleStub.calledWithExactly('SLSFCInvocationFromAPIGateway')).toEqual(true);
          expect(createApiRoleStub.called).toEqual(false);
          expect(aliyunDeploy.apiRole).toEqual(fullRole);
        });
      }
    );
  });


  describe('#createApiPolicyIfNotExists()', () => {
    let getPoliciesStub;
    let createPolicyStub;

    beforeEach(() => {
      getPoliciesStub = sinon.stub(aliyunDeploy.provider, 'getPolicies');
      createPolicyStub = sinon.stub(aliyunDeploy.provider, 'createPolicy');
    });

    afterEach(() => {      
      aliyunDeploy.provider.getPolicies.restore();
      aliyunDeploy.provider.createPolicy.restore();
    });

    it('should create api policy if it does not exist', () =>  {
        getPoliciesStub
          .returns(BbPromise.resolve([]));
        createPolicyStub.returns(BbPromise.resolve(role.Policies[0]));
        return aliyunDeploy.createApiPolicyIfNotExists().then(() => {
          expect(getPoliciesStub.calledOnce).toEqual(true);
          expect(getPoliciesStub.calledWithExactly(role)).toEqual(true);
          expect(createPolicyStub.calledOnce).toEqual(true);
          expect(createPolicyStub.calledWithExactly(role.Policies[0])).toEqual(true);
        });
      }
    );

    it('should not create api role if it exists', () =>  {
        getPoliciesStub
          .returns(BbPromise.resolve(role.Policies));
        createPolicyStub.returns(BbPromise.resolve(role.Policies[0]));
        return aliyunDeploy.createApiPolicyIfNotExists().then(() => {
          expect(getPoliciesStub.calledOnce).toEqual(true);
          expect(getPoliciesStub.calledWithExactly(role)).toEqual(true);
          expect(createPolicyStub.called).toEqual(false);
        });
      }
    );
  });

  describe('#checkExistingApis()', () => {
    let getApisStub;

    beforeEach(() => {
      aliyunDeploy.apis = apis;
      aliyunDeploy.apiGroup = fullGroup;
      getApisStub = sinon.stub(aliyunDeploy.provider, 'getApis');
    });

    afterEach(() => {
      aliyunDeploy.provider.getApis.restore();
    });

    it('should fill in api map properly', () => {
      const expectedMap = new Map([
        ['sls-http-my-service-dev-currentTime', fullApis[0]],
        ['sls-http-my-service-dev-currentTime2', false]
      ]);
      getApisStub
        .returns(BbPromise.resolve([fullApis[0]]));
      return aliyunDeploy.checkExistingApis().then(() => {
        expect(getApisStub.calledOnce).toEqual(true);
        expect(getApisStub.calledWithExactly({
          GroupId: fullGroup.GroupId
        })).toEqual(true);
        expect(aliyunDeploy.apiMap).toEqual(expectedMap);
      });
    });
  });

  describe('#createOrUpdateApi()', () => {
    let updateApiStub;
    let createApiStub;
    let consoleLogStub;

    beforeEach(() => {
      aliyunDeploy.apis = apis;
      aliyunDeploy.apiGroup = fullGroup;
      aliyunDeploy.apiRole = fullRole;
      aliyunDeploy.apiMap = new Map([
        ['sls-http-my-service-dev-currentTime', fullApis[0]],
        ['sls-http-my-service-dev-currentTime2', false]
      ]);
      updateApiStub = sinon.stub(aliyunDeploy.provider, 'updateApi');
      createApiStub = sinon.stub(aliyunDeploy.provider, 'createApi');
      consoleLogStub = sinon.stub(aliyunDeploy.serverless.cli, 'log').returns();
    });

    afterEach(() => {
      aliyunDeploy.provider.updateApi.restore();
      aliyunDeploy.provider.createApi.restore();
      aliyunDeploy.serverless.cli.log.restore();
    });

    it('should create and update apis according to the map', () => {
      updateApiStub.returns(BbPromise.resolve());
      createApiStub.returns(BbPromise.resolve(fullApis[1]));
      const expectedMap = new Map([
        ['sls-http-my-service-dev-currentTime', fullApis[0]],
        ['sls-http-my-service-dev-currentTime2', fullApis[1]]
      ]);
      return aliyunDeploy.createOrUpdateApis().then(() => {
        expect(updateApiStub.calledOnce).toEqual(true);
        expect(updateApiStub.calledWithExactly(
          fullGroup,
          fullRole,
          Object.assign({ApiId: fullApis[0].ApiId}, apis[0])
        )).toEqual(true);
        expect(createApiStub.calledOnce).toEqual(true);
        expect(createApiStub.calledWithExactly(
          fullGroup,
          fullRole,
          apis[1]
        )).toEqual(true);
        expect(consoleLogStub.calledTwice).toEqual(true);
        expect(createApiStub.calledAfter(updateApiStub)).toEqual(true);
        expect(aliyunDeploy.apiMap).toEqual(expectedMap);
      });
    });
  });

  describe('#deployApis()', () => {
    let deployApiStub;
    let consoleLogStub;

    beforeEach(() => {
      aliyunDeploy.apis = apis;
      aliyunDeploy.apiGroup = fullGroup;
      aliyunDeploy.apiRole = fullRole;
      aliyunDeploy.apiMap = new Map([
        ['sls-http-my-service-dev-currentTime', fullApis[0]],
        ['sls-http-my-service-dev-currentTime2', fullApis[1]]
      ]);
      deployApiStub = sinon.stub(aliyunDeploy.provider, 'deployApi');
      consoleLogStub = sinon.stub(aliyunDeploy.serverless.cli, 'log').returns();
    });

    afterEach(() => {
      aliyunDeploy.provider.deployApi.restore();
      aliyunDeploy.serverless.cli.log.restore();
    });

    it('should deploy apis', () => {
      deployApiStub.returns(BbPromise.resolve());

      return aliyunDeploy.deployApis().then(() => {
        expect(deployApiStub.calledTwice).toEqual(true);
        expect(deployApiStub.calledWithExactly(
          fullGroup,
          fullApis[0]
        )).toEqual(true);
        expect(deployApiStub.calledWithExactly(
          fullGroup,
          fullApis[0]
        )).toEqual(true);
        expect(consoleLogStub.calledTwice).toEqual(true);
      });
    });
  });
});
